---OPONENT JOINING
CREATE OR REPLACE FUNCTION NOTIFY_OPPONENT_JOINING(
) RETURNS TRIGGER AS 
	$$ DECLARE BEGIN IF NEW.state = 'OPPONENT_JOINING' THEN PERFORM pg_notify (
	    NEW.roomID:: text || '::' || 'opponent_joining',
	    row_to_json (NEW):: text
	);
	END IF;
	RETURN NEW;
	END;
	$$ LANGUAGE
PLPGSQL; 

CREATE TRIGGER 
	NOTIFY_OPPONENT_JOINING_TRIGGER AFTER
	INSERT ON "Game" FOR EACH ROW
	EXECUTE
	    PROCEDURE NOTIFY_OPPONENT_JOINING ()
; 

---BOARD UPDATE
CREATE OR REPLACE FUNCTION NOTIFY_BOARD_UPDATE() RETURNS 
TRIGGER AS 
	$$ DECLARE roomID text;
	BEGIN
	SELECT gm.roomID INTO roomID
	FROM Game AS gm
	WHERE gm.boardId = NEW.id;
	PERFORM pg_notify (
	    roomID || '::' || 'board_update',
	    row_to_json (NEW):: text
	);
	RETURN NEW;
	END;
	$$ LANGUAGE
PLPGSQL; 

CREATE TRIGGER 
	NOTIFY_BOARD_UPDATE_TRIGGER AFTER
	UPDATE ON "Board" FOR EACH ROW
	EXECUTE
	    PROCEDURE NOTIFY_BOARD_UPDATE ()
; 